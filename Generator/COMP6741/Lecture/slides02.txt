René Witte
Introduction
Motivation
Why Knowledge Graphs?
History
Knowledge Representation
Semantic Web
Knowledge Graphs
RDF
RDF Triples
Literals
Blank Nodes
Knowledge Bases:
DBpedia, Wikidata
Namespaces
Serialization
Programming
Data Integration
Example
Conclusions
Architecture
Examples
KGs and LLMs
Notes and Further
Reading
2.1
Lecture 2
COMP 474/6741, Winter 2024
Department of Computer Science
and Software Engineering
Concordia University
2.2
Outline
1 Introduction
2 History
3 The Resource Description Framework (RDF)
4 Example: Data Integration with Knowledge Graphs
5 Conclusions
6 Notes and Further Reading
2.3
Slides Credit
• Includes slides from Jay Pujara & Sameer Singh, Mining Knowledge Graphs
from Text, https://kgtutorial.github.io/
• Includes slides by Ivan Herman, W3C [Her]
• Includes slides from Kristof Neys, Neo4j, The perfect couple: Uniting Large
Language Models and Knowledge Graphs for Enhanced Knowledge
Representation,
https://www.slideshare.net/neo4j/the-perfect-couple-uniting-large-language-m
odels-and-knowledge-graphs-for-enhanced-knowledge-representation
https://kgtutorial.github.io/
https://www.slideshare.net/neo4j/the-perfect-couple-uniting-large-language-models-and-knowledge-graphs-for-enhanced-knowledge-representation
2.4
2.5
Eliza
2.6
Google Assistant
2.7
IBM Watson
2.8
Generic Assistant Architecture
2.9
What is a knowledge graph?
• Knowledge in graph form!
• Captures entities, attributes,
and relationships
• Nodes are entities
• Nodes are labeled with
attributes (e.g., types)
• Typed edges between two
nodes capture a relationship
between entities
20
E1
A1
A2
E2
E3
Aryan Saxena
2.10
Example knowledge graph
21
person
placeLiverpool
bandBeatles
John
Lennon
2.11
Why knowledge graphs?
• Humans:
•Combat information overload
•Explore via intuitive structure
•Tool for supporting knowledge-driven tasks
• AIs:
•Key ingredient for many AI tasks
•Bridge from data to human semantics
•Use decades of work on graph analysis
23
2.12
Applications 1: QA/Agents
24
2.13
Applications 2: Decision Support
25
2.14
Applications 3: Fueling Discovery
26
2.15
Knowledge Graphs & Industry
•Google Knowledge Graph
• Google Knowledge Vault
•Amazon Product Graph
•Facebook Graph API
•IBM Watson
•Microsoft Satori
• Project Hanover/Literome
•LinkedIn Knowledge Graph
•Yandex Object Answer
•Diffbot, GraphIQ, Maana, ParseHub, Reactor Labs,
SpazioDati
27
2.16
Where do knowledge graphs come from?
• Structured Text
◦ Wikipedia Infoboxes, tables,
databases, social nets
30
2.17
• Unstructured Text
◦ WWW, news, social media,
reference articles
31
2.18
• Images
32
2.19
• Video
◦ YouTube, video feeds
33
2.20
2.21
History of Knowledge Representation (KR)
Simon&Newell
General Problem
Solver
McCarthy
Formalizing
Commonsense
Hayes&McCarthy
Frame Problem
Quillian
Semantic
Networks
ConceptNet
Brooks
Subsumption
Minsky, Filmore
Frames
McCulloch
&Pitts
Artificial
Neurons
Minsky
&Pappert
“Perceptrons”Systematicity
Debate
2000              1990                1980             1970               1960               1950              19402000              1990                1980             1970               1960               1950              1940
SHRUTI
Bobrow
STUDENT
Winograd
SHRDLU
Rumelhart et al
BackPropagationSeries of Neural-
Symbolic Models
Description
Logic
Lenant
Cyc
SLIDE COURTESY OF DANIEL KHASHABI
2.22
•Decades of research into knowledge representation
•Most knowledge graph implementations use RDF triples
• <rdf:subject, rdf:predicate, rdf:object> : r(s,p,o)
• Temporal scoping, reification, and skolemization...
•ABox (assertions) versus TBox (terminology)
•Common ontological primitives
• rdfs:domain, rdfs:range, rdf:type, rdfs:subClassOf, rdfs:subPropertyOf, ...
• owl:inverseOf, owl:TransitiveProperty, owl:FunctionalProperty, ...
36
2.23
•Standards for defining and exchanging knowledge
• RDF, RDFa, JSON-LD, schema.org
• RDFS, OWL, SKOS, FOAF
•Annotated data provide critical resource for automation
•Major weakness: annotate everything?
37"LINKING OPEN DATA CLOUD DIAGRAM 2014, BY MAX SCHMACHTENBERG, CHRISTIAN BIZER, ANJA JENTZSCH
AND RICHARD CYGANIAK. HTTP://LOD-CLOUD.NET/"
2.24
2.25
Today
From 1950–2020. . .
• Concepts have been around for a long time (Semantic Networks, Frames,
Description Logic, . . . )
1980s/90s
• AI/IS systems suffer from the Knowledge Acquisition Bottleneck
• One of the reasons for the AI Winter at that time
Technology
• Open standards, based on W3C recommendations, e.g., RDF
• Proprietary products, e.g., Neo4J or Oracle Spatial and Graph
• We now have substantial knowledge bases available, both proprietary
(e.g., Facebook Graph Search, Google Knowledge Graph) and
open access (e.g., Wikidata, DBpedia, YAGO)
2.26
40
2.27
TBL at TED on “The Next Web” (2009)
https://www.youtube.com/watch?v=OM6XIICm_qo
2.28
Knowledge Bases: DBpedia, Wikidata
2.29
2.30
The W3C “Layer Cake”
2.31
Knowledge as Graphs
→ Worksheet #1: Tasks 1 & 2 https://www.w3.org/TR/rdf11-primer/
https://www.w3.org/TR/rdf11-primer/
2.32
Triples
Representation of Knowledge Graphs
In a system, we represent graphs in form of triples:
<subject> <predicate> <object>
(The predicate is sometimes called property.)
<Bob> <is a> <person>.
<Bob> <is a friend of> <Alice>.
<Bob> <is born on> <the 14th of July 1990>.
<Bob> <is interested in> <the Mona Lisa>.
<the Mona Lisa> <was created by> <Leonardo da Vinci>.
→ Worksheet #1: Tasks 3 & 4
2.33
Graphs vs. Triples
2.34
The Resource Description Framework (RDF)
W3C (World Wide Web Consortium) standard (“recommendation”)
• first public draft 1997
• RDF 1.0 in 1999; revised in 2004
• RDF 1.1 in 2014 (current version)
Family of standards: RDF, RDFS, RDFa, Turtle, N3, SPARQL, . . .
2.35
Format of triples
In RDF,
• Subject and predicate must be URIs (IRIs)
• Object can be IRI or literal
<http://www.wikidata.org/entity/Q12418>
<http://purl.org/dc/terms/title>
"Mona Lisa" .
<http://purl.org/dc/terms/creator>
<http://dbpedia.org/resource/Leonardo_da_Vinci> .
→ Worksheet #1: Tasks 5 & 6
2.36
RDF Literals
"Mona Lisa"
In this triple
<http://purl.org/dc/terms/title> "Mona Lisa" .
"Mona Lisa" is a string literal
Things to know about literals
• Literals have a datatype, e.g., string or int
• Strings can have a language tag, e.g.,
"Leonardo da Vinci"@en
"Léonard de Vinci"@fr
• Strings are often used to provide human-readable labels
“Hey, how did you like the movie Q168154?”
• For strings only, datatype can be omitted:
"Mona Lisa" is equivalent to "Mona Lisa"^^xsd:string
• Again, literals can only appear in the object position of a triple <s> <p> <o>
All the details about datatypes: https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#section-Datatypes
https://www.w3.org/TR/2014/REC-rdf11-concepts-20140225/#section-Datatypes
2.37
<http://dbpedia.org/resource/Mona_Lisa> <lio:shows> _:x .
_:x a <http://dbpedia.org/resource/Cypress> .
2.38
Wikidata
http://www.wikidata.org/entity/Q12418
Wikidata URIs
Make sure you use the correct URI:
• http://wikidata.org/entity/Q{id} is the persistent URI
• Visited with a web browser, the Wikidata server redirects to
• http://wikidata.org/wiki/Q{id} (HTML data, for a human)
→ Worksheet #1: Task 7
2.39
DBpedia
http://dbpedia.org/resource/Leonardo_da_Vinci
DBpedia URIs
Similarly, make sure you use the correct DBpedia URIs:
• http://dbpedia.org/resource/... is the canonical URI
• The DBpedia server returns either
• http://dbpedia.org/page/... (HTML data, for a human)
• http://dbpedia.org/data/... (RDF data, for an AI)
2.40
Shortening URIs
Instead of always writing full URIs (IRIs), we can split them into a prefix and suffix,
e.g.: <http://dbpedia.org/resource/Leonardo_da_Vinci>
• We define a prefix dbpedia:
PREFIX dbpedia: <http://dbpedia.org/resource/>
• and now we can simple write:
dbpedia:Leonardo_da_Vinci
• Note: angle brackets <> only for full IRIs
→ reduces dataset sizes, easier to read
Conventions
Commonly used URLs use the same namespace prefix
• E.g., FOAF (friend-of-a-friend):
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
• Lookup a prefix at https://prefix.cc/
→ Worksheet #1: Tasks 8 & 9
https://prefix.cc/
2.41
Formats
There is no single format .rdf (like .xml), commonly used are:
RDF/XML for data exchange (somewhat deprecated)
RDFa for embedding RDF into web pages
N-Triples (N3) for streaming RDF data and bulk dataset up-/download
Turtle for human-readable files
JSON-LD for web applications
plus some variations/extensions.
N-Triples
So far, we’ve mostly used the N-Triples format:
<http://www.wikidata.org/entity/Q12418> ←↩
each line in a file is one triple, full IRIs only (no namespace prefixes) and ended by
a period ’.’
2.42
Turtle
BASE <http://example.org/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema>
PREFIX schema: <http://schema.org/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX wd: <http://www.wikidata.org/entity/>
<bob#me>
a foaf:Person ;
foaf:knows <alice#me> ;
schema:birthDate "1990-07-04"^^xsd:date ;
foaf:topic_interest wd:Q12418 .
wd:Q12418
dcterms:title "Mona Lisa" ;
dcterms:creator <http://dbpedia.org/resource/Leonardo_da_Vinci> .
<http://data.europeana.eu/item/04802/243FA8618938F4117025F17A8B813C5F9AA4D619>
dcterms:subject wd:Q12418 .
2.43
Graph corresponding to the Turtle example
2.44
(64) 64
}  For example, using Python+RDFLib:
§  a “Graph” object is created
§  the RDF file is parsed and results stored in the Graph
§  the Graph offers methods to retrieve (or add):
•  triples
•  (property,object) pairs for a specific subject
•  (subject,property) pairs for specific object
•  etc.
§  the rest is conventional programming…
}  Similar tools exist in Java, PHP, etc.
2.45
(65) 65
# create a graph from a file
graph = rdflib.Graph()
graph.parse("filename.rdf", format="rdfxml")
# take subject with a known URI
subject = rdflib.URIRef("URI_of_Subject")
# process all properties and objects for this subject
for (s,p,o) in graph.triples((subject,None,None)) :
do_something(p,o)
2.46
2.47
Let’s start with a Book. . .
2.48
(21) 21
ISBN Author Title Publisher Year
0006511409X id_xyz The Glass Palace id_qpr 2000
ID Name Homepage
id_xyz Ghosh, Amitav http://www.amitavghosh.com
ID Publisher’s name City
id_qpr Harper Collins London
2.49
(22) 22
http://…isbn/000651409X
Ghosh, Amitav http://www.amitavghosh.com
The Glass Palace
2000
London
Harper Collins
a:title
a:year
a:city
a:p_name
a:name a:homepage
a:author
2.50
(23) 23
}  Relations form a graph
§  the nodes refer to the “real” data or contain some literal
§  how the graph is represented in machine is immaterial for
now
2.51
Now the same book in French. . .
2.52
(25) 25
A B C D
1 ID Titre Traducteur Original
2 ISBN 2020286682 Le Palais des Miroirs $A12$ ISBN 0-00-6511409-X
3
4
5
6 ID Auteur
7 ISBN
0-00-6511409-X
$A11$
8
9
10 Nom
11 Ghosh, Amitav
12 Besse, Christianne
2.53
(26) 26
Ghosh, Amitav
Besse, Christianne
Le palais des miroirs
f:nom
f:traducteur
f:auteur
http://…isbn/2020386682
2.54
(27) 27
http://www.amitavghosh.com
a:name
a:homepage
2.55
(28) 28
Same URI!
2.56
(29) 29
f:original
2.57
(30) 30
}  User of data “F” can now ask queries like:
§  “give me the title of the original”
•  well, … « donnes-moi le titre de l’original »
}  This information is not in the dataset “F”…
}  …but can be retrieved by merging with dataset “A”!
2.58
(31) 31
}  We “feel” that a:author and f:auteur should be the
same
}  But an automatic merge doest not know that!
}  Let us add some extra information to the merged
data:
§  a:author same as f:auteur
§  both identify a “Person”
§  a term that a community may have already defined:
•  a “Person” is uniquely identified by his/her name and, say,
homepage
•  it can be used as a “category” for certain type of resources
2.59
(32) 32
Le palais des miroirs f:original
http://…foaf/Person
r:type
2.60
(33) 33
}  User of dataset “F” can now query:
§  “donnes-moi la page d’accueil de l’auteur de l’original”
•  well… “give me the home page of the original’s ‘auteur’”
}  The information is not in datasets “F” or “A”…
}  …but was made available by:
§ merging datasets “A” and datasets “F”
§  adding three simple extra statements as an extra “glue”
2.61
(34) 34
}  Using, e.g., the “Person”, the dataset can be
combined with other sources
}  For example, data in Wikipedia can be extracted
using dedicated tools
§  e.g., the “dbpedia” project can extract the “infobox”
information from Wikipedia already…
2.62
(35) 35
http://dbpedia.org/../Amitav_Ghosh
foaf:name w:reference
2.63
(36) 36
http://dbpedia.org/../The_Hungry_Tide
http://dbpedia.org/../The_Calcutta_Chromosome
http://dbpedia.org/../The_Glass_Palace
w:author_of
w:isbn
2.64
(37) 37
http://dbpedia.org/../Kolkata
w:born_in
w:long w:lat
2.65
(38) 38
}  It may look like it but, in fact, it should not be…
}  What happened via automatic means is done every
day by Web users!
}  The difference: a bit of extra rigour so that machines
could do this, too
→ Worksheet #1: Task 10
2.66
Knowledge Graphs and Large Language Models
2.67
(40) 40
Data in various formats
Data represented in abstract format
Applications
Map,
Expose,
…
Manipulate
Query
2.68
(41) 41
Inferencing
Query and Update
Web of Data
Browser
Stand Alone
Common “Graph”
Format &
Common
Vocabularies
“Bridges”
Data on the Web
2.69
Google’s Knowledge Graph (2012)
https://www.youtube.com/watch?v=mmQl6VGvX-c
2.70
2.71
© 2023 Neo4j, Inc. All rights reserved.
LLMs Core function…To manipulate strings…
• GPT training focuses primarily on predicting the probability of text sequences and
specifically for predicting which words come next in a sequence
“When you play the
game of thrones….
Input
LLM
…you win or you die.
There is no middle
ground.”
Output
2.72
2.73
There is no need for this…!
2.74
Whereas we all know what The Truth is…
2.75
2.76
Making stuff up…
2.77
In Summary…
2.78
© 2023 Neo4j, Inc. All rights reserved.18
Three main ways to let LLM’s work with your Graph
2.79
How to Help LLMs Do Better?
Few-Shot LearningFine-Tuning Grounding
Provide completed
examples “shots” to the AI
as context in prompts.
a.k.a In-Context Learning
Provide additional training
data to better tune GenAI
to your use case
Provide AI with the
information to use for
generating responses
2.80
Grounding
Provide AI with the information to use for generating responses
Best of Both Worlds
Use the language understanding skills of LLMs but control the knowledge/sources it uses
● Improve accuracy & tailor to enterprise and use case
● Reduce hallucinations and other inconsistencies
● Control provenance
Methods
● Internet search, plugins, agents
● Query generation
● Retrieval Augmented Generation (RAG)
Image by GenAI (DALL-E)
2.81
Grounding with Retrieval Augmented Generation (RAG)
2.82
LLMs can help generate more accurate responses by
considering the connections and dependencies within the
graph and mapping new links as new data is identified.
Flexible Schema means it is
easy to grow your knowledge
base whenever new
information is available
Relationships are data
that is used to return
explicit results
Accuracy
Vector Search adds semantic
search
2.83
Knowledge graphs supply the LLM with information about your
company so answers are specific to your business, giving more
context for more accurate responses.
Add a layer of context over
your LLM for accuracy and
specificity
Specificity
2.84
Map relationships between search
results and data source nodes
Represent data sources as nodes
Add metadata or annotations
Verify the enriched responses from your LLM because each piece of
information is linked to its sources and origins.
Explainability
2.85
LLM retrieves and returns information governed by your enterprise security
and access control policies - down to the node level.
Define policies by role or
identity
Integrates with identity and
access management provider
with SSO
Security & Privacy
Build constraints on nodes,
labels, relationships, properties,
specific parts of the graph, and
even traversal depth
2.86
Easily scale with autonomous
clustering
Reliability & Low-latency
Knowledge graphs scale and are battle-tested to thousands of
concurrent users, get answers quickly with incredibly fast query speeds.
Incredibly fast traversals with index
free adjacency
2.87
2.88
Reading Material
Required
• [Yu14, Chapters 1, 2] (Introduction, RDF)
Supplemental
• [Wor14] (RDF Primer)
2.89
References
[Her] Ivan Herman.
Tutorial on Semantic Web Technologies.
http://www.w3.org/People/Ivan/CorePresentations/RDFTutorial/.
[Wor14] World Wide Web Consortium (W3C).
RDF 1.1 Primer.
http://www.w3.org/TR/rdf11-primer/, 24 June 2014.
[Yu14] Liyang Yu.
A Developer’s Guide to the Semantic Web.
Springer-Verlag Berlin Heidelberg, 2nd edition, 2014.
https://concordiauniversity.on.worldcat.org/oclc/897466408.
http://www.w3.org/People/Ivan/CorePresentations/RDFTutorial/
http://www.w3.org/TR/rdf11-primer/
https://concordiauniversity.on.worldcat.org/oclc/897466408
Example: Data Integration with Knowledge Graphs
Notes and Further Reading
