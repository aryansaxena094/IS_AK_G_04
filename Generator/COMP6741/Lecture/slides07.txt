René Witte
Introduction
Intelligent Conversational
Agents
Examples
Design process
Search-Based Bots
Pattern-Matching Bots
Grounding-Based Bots
Question Classification
NLP Pipelines
Designing the Knowledge
Base
Linking Documents and
Knowledge Graphs
Conclusions
Example: Watson
Summary
Notes and Further
Reading
7.1
Lecture 7
Intelligent Agents
COMP 474/6741, Winter 2024
Department of Computer Science
and Software Engineering
Concordia University
7.2
Outline
1 Introduction
2 Search-Based Bots
3 Pattern-Matching Bots
4 Grounding-Based Bots
5 Conclusions
6 Notes and Further Reading
7.3
https://www.forbes.com/sites/marisagarcia/2024/02/19/what-air-canada-lost-in-remarkable-lying-ai-chatbot-case/?sh=
57e7bfe9696f
https://www.forbes.com/sites/marisagarcia/2024/02/19/what-air-canada-lost-in-remarkable-lying-ai-chatbot-case/?sh=57e7bfe9696f
7.4
Intelligent Conversational Agents
a.k.a. Dialog System or Dialog Engine
• A software program that can interpret and
respond to statements made by users in a
natural language
• Different types of chatbots
• Generic vs. Goal-oriented
• Retrieval vs. Generative (Deep Learning)
• Similar architecture, different stacks
7.5
Apple’s “Knowledge Navigator” Vision (1987)
https://www.youtube.com/watch?v=umJsITGzXd0
7.6
Siri (2009)
https://tomgruber.org/writing/semtech09.htm
7.7
Siri Presentation
https://vimeo.com/5424527
7.8
The Chatbots Landscape (2017)
7.9
Chatbot Approaches
Modern approaches
Pattern matching: Regex matching and response templates (canned responses)
Grounding: Knowledge graphs and inference on those graphs
Search: Text retrieval
Generative: Statistics and machine learning
Hybrid approaches
Using multiple (or all four) techniques in one bot
7.10
Chatbot Applications
Question answering: Google Search, Alexa, Siri, Watson
Virtual assistants: Google Assistant, Alexa, Siri, MS paperclip
Conversational: Google Assistant, Google Smart Reply, Mitsuki Bot
Marketing: Twitter bots, blogger bots, Facebook bots, Google Search, Google
Assistant, Alexa, Allo
Customer service: Storefront bots, technical support bots
Community management: Bonusly, Slackbot
Therapy: Woebot, Wysa, YourDost, Siri, Allo
7.12
Chatbot techniques used for some example applications
Copyright 2019 by Manning Publications Co., [LHH19]
7.13
Chatbot recirculating (recurrent) pipeline
7.14
Marketing Chatbots
Bots promoting movies, TV shows, video games, . . .
• HBO promoted “Westworld” with “Aeden”
• Sony promoted “Resident Evil” with “Red Queen”
• Disney promoted “Zootopia” with “Officer Judy Hopps”
• Universal promoted “Unfriended” with “Laura Barnes”
• Activision promoted “Call of Duty” with “Lt. Reyes”
https://venturebeat.com/2016/05/03/call-of-duty-infinite-warfares-first-victory-6m-bot-messages-on-facebook/
7.15
Leena.ai
HR chatbot answering employees questions
https://techcrunch.com/2018/06/29/leena-ai-builds-hr-chat-bots-to-answer-policy-questions-automatically/
7.16
Leena.ai Use Case
https://www.youtube.com/watch?v=aiuDC2OSIYE
7.17https://inc42.com/buzz/y-combinator-graduate-hrtech-startup-leena-ai-raises-2-mn-seed-fund/
https://inc42.com/buzz/y-combinator-graduate-hrtech-startup-leena-ai-raises-2-mn-seed-fund/
7.18
https://www.theguardian.com/technology/2016/jun/28/chatbot-ai-lawyer-donotpay-parking-tickets-london-new-york
7.19
Perceived Business Benefits
• “Top 5 Emerging Technologies in 2018”
(Gartner)
• Global Market to reach $1-3B by 2025,
CAGR of 25-40%
• Huge benefits across the value chain:
• Sales & Marketing
• HR & Operations
• Service & Payment
• Retention & Growth
7.20https://techcrunch.com/2021/03/10/heyday-seed-funding-2/
https://techcrunch.com/2021/03/10/heyday-seed-funding-2/
7.21
Edubots
https://www.edubots.eu
7.22
Bot Design Process
User Stories
• Develop pairs of user questions – expected answers
• Generalize multiple stories with the same theme
Development
• Identify appropriate technology for specific type of question
• Enhance bot based on approach (e.g., add data for retrieval)
→ Worksheet #6: Task 1
7.23
7.24
Basic approach
Information Retrieval-based Approach
Given a corpus of previously answered questions
• Create tf-idf vector of the question
• Compute cosine similarity with either:
• tf-idf vectors of answers (if only answers available)
• tf-idf vectors of questions (if question/answer pairs available)
Example Dataset
1.4 million answered questions from Amazon:
https://jmcauley.ucsd.edu/data/amazon/qa/
QnA Maker (Microsoft)
“Low code” approach
https://www.qnamaker.ai/
Microsoft Azure Cognitive Services for Language
https://language.cognitive.azure.com/
7.27
Example
https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/quickstarts/create-publish-knowledge-base?tabs=v1
7.28
7.29
Eliza Example
Eliza + DOCTOR script
If the input sentence is:
I am very unhappy these days.
Eliza’s response will be:
How long have you been very unhappy these days?
Processing
Keyword:
I am
Decomposition pattern:
I am <whatever>
Reassembly Pattern:
How long have you been <whatever>?
7.30
Pattern-response matching
"(.*)?do you remember (.*)?": [
"Did you think I would forget $2?",
"Why do you think I should recall $2 now?",
"What about $2?",
"You mentioned $2",
],
"(.*)?my mother (.*)?": [
"Who else in your family $2?",
"Tell me more about your family",
"(.*)?why don’t you (.*)?": [
"Should you $2 yourself?",
"Do you believe I don’t $2?",
"Perhaps I will $2 in good time",
7.31
Regular Expressions
Finite State Machine
A.k.a deterministic finite automaton (DFA).
Copyright by Dnu72 (https://commons.wikimedia.org/wiki/File:Automata_theory.svg), “Automata theory”, licensed under https://creativecommons.org/licenses/by- sa/3.0/legalcode
https://commons.wikimedia.org/wiki/File:Automata_theory.svg
https://creativecommons.org/licenses/by-sa/3.0/legalcode
7.32
Basic Concepts (https://en.wikipedia.org/wiki/Regular_expression)
Boolean "or": A vertical bar separates alternatives. For example, gray|grey can match
“gray” or “grey”.
Grouping: Parentheses are used to define the scope and precedence of the operators
(among other uses). For example, gray|grey and gr(a|e)y are equivalent
patterns which both describe the set of "gray" or "grey".
Quantification: A quantifier after a token (such as a character) or group specifies how often
that a preceding element is allowed to occur:
• ? The question mark indicates zero or one occurrences of the preceding
element. For example, colou?r matches both "color" and "colour".
• * The asterisk indicates zero or more occurrences of the preceding
element. For example, ab*c matches "ac", "abc", "abbc", "abbbc", and
so on.
• + The plus sign indicates one or more occurrences of the preceding
element. For example, ab+c matches "abc", "abbc", "abbbc", and so on,
but not "ac".
• {n} The preceding item is matched exactly n times.
• {min,} The preceding item is matched min or more times.
• {min,max} The preceding item is matched at least min times, but not
more than max times.
→ Worksheet #6: Task 2
https://en.wikipedia.org/wiki/Regular_expression)
7.33
Artificial Intelligence Markup Language (AIML)
Towards Chatbot Frameworks
• Open standard, started in 1995 by Richard Wallace et al.
• Used in the A.L.I.C.E. chatbot (and many others)
• Using XML-based patterns
• AIML kernel loads patterns and responds when match is found
<category>
<pattern>HELLO *</pattern>
<template>Hi, human!</template>
</category>
<pattern>WHAT IS YOUR NAME</pattern>
<template>I am ConUBot, your helpful assistant.</template>
7.34
AIML Examples (v2.0)
<?xml version="1.0" encoding="UTF-8"?><aiml version="2.0">
<pattern>HI</pattern>
<template>Hi!</template>
<pattern>[HELLO HI YO YOH YO’]
[ROSA ROSE CHATTY CHATBOT BOT CHATTERBOT]</pattern>
<template>Hi , How are you?</template>
<pattern>[HELLO HI YO YOH YO’ ’SUP SUP OK HEY]
[HAL YOU U YALL Y’ALL YOUS YOUSE]</pattern>
<template>Good one.</template>
</aiml>
(from [LHH19, Chapter 12])
7.35
Python & AIML
Python Implementations
• E.g., PyAiml, aiml, aiml_bot
• Support AIML 1.0 only :(
<?xml version="1.0" encoding="UTF-8"?>
<aiml version="1.0.1">
<template>Hi Human!</template>
<pattern>HELLO TROLL</pattern>
<template>Good one, human.</template>
Using aiml_bot
import aiml_bot
bot = aiml_bot.Bot(learn="conubot.aiml")
In : bot.respond("Hello Conubot!!!")
Out: ’Hi Human!’
See https://pypi.org/project/AIML-Bot/
https://pypi.org/project/AIML-Bot/
7.36
Random answers
<template>
<random>
<li>Hi Human!</li>
<li>Hi there!</li>
<li>Hello!</li>
</random>
</template>
<li>Good one, human.</li>
<li>Clever!</li>
7.37
Sessions and Predicates
<aiml version="1.0.1" encoding="UTF-8">
<pattern>MY DOGS NAME IS *</pattern>
That is interesting that you have a dog
named <set name="dog"><star/></set>
<pattern>WHAT IS MY DOGS NAME</pattern>
Your dog’s name is <get name="dog"/>.
My dogs name is Max
That is interesting that you have a dog named Max
...
What is my dogs name?
Your dog’s name is Max.
https://www.devdungeon.com/content/ai-chat-bot-python-aiml#sessions
7.38
AIML 2.0 Extensions: Rich media, hyperlinks, ...
<card>
<image>www.png</image>
<title>Italian Greyhound</title>
<subtitle>A very good dog</subtitle>
<button>
<text>AIML How-To</text>
<postback>HOW TO</postback>
</button>
<text>Back To Tour</text>
<postback>RESUME TOUR</postback>
</card>
http://www.aiml.foundation/doc.html
7.39
Pandorabots (https://pandorabots.com)
Cloud-based platform for AIML 2.0 bots
https://pandorabots.com
7.40
Other bot languages
API.ai
Proprietary, intuitive language for dialog specifications
• Dialogue history, location and user preferences
• Developed by startup Speaktoit, released as api.ai in 2014
Dialogflow
API.ai was bought by Google in 2016 and renamed in 2017 to Dialogflow
• Powers Google Assistant and other services
api.ai
7.41
https://aws.amazon.com/lex/
7.42
Designing the Knowledge Base
Linking Documents and Knowledge Graphs
7.43
Grounding
Adding Knowledge
• Using a knowledge base when creating answers
• More scalable than hard-coding every possible answer in patterns
From the lab exercises...
1 What is <X>?
E.g., “What is Concordia University?”
2 ⇒ query DBpedia to retrieve the rdfs:comment (in the user’s language) of X
Concordia University (commonly referred to as Concordia) is a public com-
prehensive university located in Montreal, Quebec, Canada. Founded in
1974 following the merger of Loyola College and Sir George Williams Uni-
versity, Concordia is one of the three universities in Quebec where English
is the primary language of instruction.
7.44
Question-answering Workflow
Copyright 2013 by Manning Publications Co., [IMF13]
7.45
Question Types
Classifying Questions
Different types of questions require different SPARQL query structures (ASK,
SELECT, using COUNT, etc.)
7.46
Question Types (contd.)
7.47
Applying ML
• What we need is a classifier that takes a question as input and returns the type
as output
• This is a typical machine learning problem (supervised learning)
7.48
Feature Extraction
Feature Engineering
Need to convert text (here: question) into a feature vector
• Could use count or tf-idf vector
• but this results in a high number of dimensions (and possible overfitting)
Idea: Reduce Dimensions
Can we come up with some other features that can be easily extracted?
• Length (in words/characters)?
• Number of words with capital letters?
• Ends with question mark or not?
• Number of nouns/verbs?
Challenge: find features that facilitate classification.
→ Worksheet #6: Tasks 3 & 4
7.49
Dimensionality reduction in NLP
Some common strategies
Stemming: reduce words to their stem (e.g., students, student⇒ student)
Stopword removal: remove stop-words (e.g., the, in, an, a, ...)
7.50
Example NLP Pipeline
7.51
Tokenization
Task
• Split input stream of characters into individual tokens (words, numbers, etc.)
• Done by a Tokenizer (e.g., the default tokenizer in scikit-learn)
Tokenization can be difficult...
For example, biomedical documents with complex expressions, chemical formulas,
etc.:
• 1,4-β-xylanase II from Trichoderma reesei
• When N-formyl-L-methionyl-L-leucyl-L-phenylalanine (fMLP) was injected. . .
• Technetium-99m-CDO-MeB [Bis[1,2-cyclohexanedione-dioximato(1-
)-O]-[1,2-cyclohexanedione dioximato(2-)-O]
methyl-borato(2-)-N,N′,N′′,N′′′,N′′′′,N′′′′′)-chlorotechnetium) belongs to a family
of compounds. . .
7.52
Part-of-Speech (POS) Tagging and Parsing
POS Tagging
Assign a POS tag (e.g., Noun, Verb, Adjective, Adverb, ...) to each Token:
The/DT big/ADJ dog/NN
Can be done reliably, available in NLP libraries (e.g, spaCy or NLTK for Python).
Parsing
Create a tree representing a sentence’s grammatical structure
You can then extract subject or object, e.g., to use in a SPARQL query.
→ Worksheet #6: Task 5
7.53
Generating SPARQL Queries (I)
Steinmetz N, Arning AK, Sattler KU. From natural language questions to SPARQL queries: a
pattern-based approach. BTW 2019. https://dl.gi.de/handle/20.500.12116/21702
https://dl.gi.de/handle/20.500.12116/21702
7.54
Generating SPARQL Queries (II)
→ Worksheet #6: Task 6
7.55
Generating SPARQL Queries: Evaluation
7.56
The Stanford Question Answering Dataset (SQuAD)
https://rajpurkar.github.io/SQuAD-explorer/
→ Worksheet #6: Task 7
7.57
7.58
Competency Questions
Knowledge Base Design
Unlike (relational) databases, knowledge bases do not have a rigid, pre-defined
design for a specific application
• Encourage inter-connection of knowledge
• Still helpful to have an idea of possible use cases
Design Method
• Start with a set of questions to guide the design of the vocabulary and data
triples
• It must be possible to answer the questions when the knowledge base has
been constructed
• These competency questions can be seen as a requirements specification for a
vocabulary or knowledge base
7.59
Competency Questions: Examples
Some possible competency questions for a university knowledge graph:
Q1: Which courses are offered at University X?
Q2: Which topics are covered by a course C?
Q3: Which professors teach at university X?
Q4: What are the prerequisites for a given course C?
Q5: Which universities offer courses that cover topic T ?
Note
These mostly follow a single pattern
Which [CLASS1] [PROPERTY] [CLASS2]?
7.60
Competency Question: Patterns
Towards Competency Question-Driven Ontology Authoring, https://link.springer.com/chapter/10.1007/978- 3- 319- 07443- 6_50
CQ Archetypes (PA = Predicate Arity, RT = Relation Type, M = Modifier, DE = Domain-independent Element; obj. =
object property relation, data. = datatype property relation, num. = numeric modifier, quan. = quantitative modifier, tem.
= temporal element, spa. = spatial element; CE = class expression, OPE = object property expression, DP = datatype
property, I = individual, NM = numeric modifier, PE = property expression, QM = quantity modifier)
https://link.springer.com/chapter/10.1007/978-3-319-07443-6_50
7.61
Testing Competency Questions
Example: African Wildlife Ontology (AWO)
Competency question awo_6 “Which plants eat animals?”
Verify using a SPARQL query:
SELECT DISTINCT ?eats
WHERE {
?eats rdfs:subClassOf awo:plant, [
a owl:Restriction ;
owl:onProperty awo:eats;
owl:someValuesFrom awo:animal
] .
FILTER(?eats != owl:Nothing)
}
See https://www.researchgate.net/publication/338424817_Dataset_of_ontology_c
ompetency_questions_to_SPARQL-OWL_queries_translations
Another approach: SHACL
There is also a separate standard, the Shapes Constraint Language (SHACL)
(https://www.w3.org/TR/shacl/), see [HHDF20] for an example.
→ Worksheet #6: Task 8
https://www.researchgate.net/publication/338424817_Dataset_of_ontology_competency_questions_to_SPARQL-OWL_queries_translations
https://www.w3.org/TR/shacl/
7.62
Generic SPARQL Query Generator
Unger C, Bühmann L, Lehmann J, Ngonga Ngomo AC, Gerber D, Cimiano P. Template-based question
answering over RDF data. In Proceedings of the 21st international conference on World Wide Web 2012
Apr 16 (pp. 639-648).
7.63
7.64
Knowledge Management Architecture 3.0
Knowledge BaseKnowledge Worker
Linked Open Data (LOD)
NLP Pipeline
Documents
7.65
Entity Linking
the efficient computation of the tree architecture ..."
http://dbpedia.org/resource/Tree_(data structure) http://dbpedia.org/resource/Tree
"The proposed approach takes advantage of both
7.66
7.68
PermID Linked Data Graph
→ Worksheet #6: Task 9
7.70
DBpedia Spotlight
https://www.dbpedia-spotlight.org/
7.71
DBpedia Spotlight: Disambiguation
→ Worksheet #6: Task 10
7.72
Approach
Spotlight uses a statistical model for disambiguation
• Using the context of a word/phrase
• Learned from the Wikipedia pages including the links (for multiple languages)
A 2012 paper reports a 85.1% accuracy for English (with 7.4% missing links)
Discussion
• Modern approaches for disambiguation use word embeddings (discussed later
in the course), with better performance
• However, Spotlight is a stable, easy-to-install tool and useful for first
experiments
Improving Efficiency and Accuracy in Multilingual Entity Extraction,
https://doi.org/10.1145/2506182.2506198
7.73
7.74
IBM Watson
Watson is a type of question-answering (QA) system, first developed 2006–2011
2011 Jeopardy! competition: 2,880 POWER7 threads and 16 terabytes of RAM
7.75
IBM Watson: The Science Behind an Answer (2011)
https://www.youtube.com/watch?v=ZbjTtCG3_X0
7.76
Summary of Chatbot Approaches
→ Worksheet #6: Task 11
7.77
7.78
Reading Material
Required
• [LHH19, Chapter 12] (Dialog engines)
Supplemental
• [IMF13, Chapter 8] (Building a QA System)
• [RN10, Chapter 26] (Philosophical Foundations)
7.79
References
[HHDF20] Marvin Hofer, Sebastian Hellmann, Milan Dojchinovski, and Johannes
Frey.
The New DBpedia Release Cycle: Increasing Agility and Efficiency
in Knowledge Extraction Workflows.
In Semantic Systems. In the Era of Knowledge Graphs, pages 1–18,
Cham, 2020. Springer International Publishing.
https://link.springer.com/chapter/10.1007/978-3-030-59833-4_1.
[IMF13] Grant S. Ingersoll, Thomas S. Morton, and Andrew L. Farris.
Taming Text: How to find, organise, and manipulate it.
Manning, 2013.
https://concordiauniversity.on.worldcat.org/oclc/772977853.
[LHH19] Hobson Lane, Cole Howard, and Hannes Max Hapke.
Natural Language Processing in Action.
Manning Publications Co., 2019.
https://concordiauniversity.on.worldcat.org/oclc/1102387045.
[RN10] Stuart Russell and Peter Norvig.
Artificial Intelligence: A Modern Approach.
Prentice Hall, 3rd edition, 2010.
https://concordiauniversity.on.worldcat.org/oclc/359890490.
https://link.springer.com/chapter/10.1007/978-3-030-59833-4_1
https://concordiauniversity.on.worldcat.org/oclc/772977853
https://concordiauniversity.on.worldcat.org/oclc/1102387045
https://concordiauniversity.on.worldcat.org/oclc/359890490
Chatbots
Notes and Further Reading
